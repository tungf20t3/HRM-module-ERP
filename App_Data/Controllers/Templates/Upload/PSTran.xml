<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE import [
  <!ENTITY CheckVoucherRightBeforeProcess SYSTEM "Include\CheckVoucherRightBeforeProcess.txt">
  <!ENTITY PSTranFields SYSTEM "Include\PSTranFields.txt">
  <!ENTITY PSTranFieldsCompact SYSTEM "Include\PSTranFieldsCompact.txt">
  <!ENTITY PSTranFieldsLocation SYSTEM "Include\PSTranFieldsLocation.txt">
  <!ENTITY PSTranFieldsLot SYSTEM "Include\PSTranFieldsLot.txt">
  <!ENTITY ControlLocationLotLoading SYSTEM "..\..\Include\Command\ControlLocationLotLoading.txt">
  <!ENTITY Detail "86">
  <!ENTITY Code "PXC">
  <!ENTITY And "&#13;">

  <!ENTITY Error "
if @r is not null begin
  select '' as message, @field as field, @r as record
  return
end
">

  <!ENTITY LockedDate "
if @r is not null begin
  select replace(@locked, '&#37;s', @@delta + @r) as message
  return
end
">

  <!ENTITY s1 "Chứng từ số &lt;span class=&quot;Highlight&quot;&gt;&#37;s1&lt;/span&gt; tại dòng &lt;span class=&quot;Highlight&quot;&gt;&#37;s2&lt;/span&gt;">
  <!ENTITY s2 "The voucher number &lt;span class=&quot;Highlight&quot;&gt;&#37;s1&lt;/span&gt; at row &lt;span class=&quot;Highlight&quot;&gt;&#37;s2&lt;/span&gt;">
  <!ENTITY SiteRight "
exec AI_ERP$System$CheckImportSiteRights '@@table', 'ma_kho', 'stt', @user, @admin, @r output, default, @$mode, @$errorCount output
if @$mode = 1 begin
  if @$errorCount = 0 begin select * from #errorTable order by id; return end;
end else begin
  &Error;
end">

  <!ENTITY % Authentication SYSTEM "..\..\Include\Authentication.ent">
  %Authentication;

  <!ENTITY % VoucherDeleteLog SYSTEM "..\..\Include\VoucherDeleteLog.ent">
  %VoucherDeleteLog;

  <!ENTITY % ConfigDynamicEvents SYSTEM "..\..\Include\ConfigImportDynamicEvents.ent">
  %ConfigDynamicEvents;
  <!ENTITY ConfigDynamicVoucherType "1">
  <!ENTITY ConfigDynamicType "1">

  <!ENTITY % ImportErrorMode SYSTEM "..\..\Include\ImportErrorMode.ent">
  %ImportErrorMode;

  <!ENTITY % CheckingCompactMode SYSTEM "Include\CheckingCompactMode.ent">
  %CheckingCompactMode;

  <!ENTITY % Tiny.External SYSTEM "..\..\Include\Tiny.External.ent">
  %Tiny.External;
  %Tiny.External.PSTran;

  <!ENTITY % ExportImportTemplate SYSTEM "..\..\Include\ExportImportTemplate.ent">
  %ExportImportTemplate;
  <!ENTITY ExportQueryStaticFile "declare @filename varchar(128)
if @@language = 'v' select @filename = case when @compactMode = '0' then 'PSMaster.xlsx' else 'PSMaster3.xlsx' end
  else select @filename = case when @compactMode = '0' then 'PSMaster2.xlsx' else 'PSMaster4.xlsx' end
if @xSplit = 1 begin
  select @filename = case
    when @$location = 0 and @$Lot = 0 then case when @@language = 'V' then 'PSMaster3.xlsx' else 'PSMaster4.xlsx' end
      when @$location = 1 and @$Lot = 0 then case when @@language = 'V' then 'PSMaster5.xlsx' else 'PSMaster6.xlsx' end
      when @$location = 0 and @$Lot = 1 then case when @@language = 'V' then 'PSMaster7.xlsx' else 'PSMaster8.xlsx' end
      when @$location = 1 and @$Lot = 1 then case when @@language = 'V' then 'PSMaster.xlsx' else 'PSMaster2.xlsx' end
    end
end
">

  <!ENTITY % ImportSqlCondition SYSTEM "..\..\Include\ImportSqlCondition.ent">
  %ImportSqlCondition;

  <!ENTITY TransferID "PSTran">
  <!ENTITY ImportOverwriteMainTable "m&Detail;$$partition">
  <!ENTITY ImportOverwriteLogTable "o&Detail;$000000">
  <!ENTITY % ImportOverwriteCommand SYSTEM "..\..\Include\ImportOverWriteVoucher.PSTran">
  %ImportOverwriteCommand;
  <!ENTITY % ImportOverwrite SYSTEM "..\..\Include\ImportOverwriteVoucher.ent">
  %ImportOverwrite;

  <!ENTITY % UnitUpload SYSTEM "..\..\Include\UnitUpload.ent">
  %UnitUpload;
]>

<import xmlns="urn:schemas-ai-erp:data-import">
  <setting>
    <type value="Voucher"/>
    <startRow value="6"/>
    <maxFileSize value="10"/>
    <uploadTimeOut value="120"/>
    <importRecordTimeout value="1740"/>
    <allowFileExtension value="^(.XLSX)$"/>
    <onProcessFail value="parent.on$PSTranImportForm$Fail(this.frameElement)"/>
    <onProcessComplete value="parent.on$PSTranImportForm$Complete(this.frameElement)"/>
    <uploadContentType value="application/ms-excel;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
    <baseTable value="m&Detail;$000000, d&Detail;$000000, r30$000000"/>
    <dependence value="m&Detail;$000000, d&Detail;$000000, i&Detail;$000000, c&Detail;$000000, r30$000000, r20$000000, ctgt30, ctgt20" alias="m, d, i, g, t30, t20, c30, c20"/>
    <listTable value="#m&Detail;, #d&Detail;, #i&Detail;, #i&Detail;, #t30, #t20, #t30, #t20"/>
    <alias value="master, detail, inquiry, general, tax30, tax20, inputTax, outputTax"/>

    &UploadModeProcess;
  </setting>

  <variable>
    <var id="C001">
      <header v="Chứng từ số và ngày đã tồn tại." e="The voucher number and dated already exists." />
    </var>
    <var id="C002">
      <header v="Chứng từ số, ngày và đơn vị đã tồn tại." e="The voucher number, dated and unit already exists." />
    </var>
    <var id="C003">
      <header v="Đã khóa số liệu, kiểm tra lại ngày chứng từ." e="Data is locked, please check the date of voucher." />
    </var>
    <var id="C010">
      <header v="Chứng từ có ngoại tệ hoặc tỷ giá nhập hơn một lần." e="The voucher currency or exchange rate already exists." />
    </var>
    &ImportOverwriteVariable;
    &ImportLockedDateVariable;
  </variable>

  <query>
    <command>
      <text>
        &Tiny.External.Import.Command;
        <![CDATA[
declare @xSplit bit, @compactMode char(1)
]]>&ControlLocationLotLoading;<![CDATA[
  set @xSplit = 1
end
if exists(select 1 from options where name = 'm_compact_mode' and val = '1') select @compactMode = '1' else select @compactMode = '0'
]]>&ExportImportTemplateQuery;<![CDATA[
if isnull(@xSplit, 0) <> 1
  if @compactMode = 1 select '1' as view_index]]>&ExportImportTemplateQueryReturnFileName;<![CDATA[ else select '0' as view_index]]>&ExportImportTemplateQueryReturnFileName;<![CDATA[
else begin
  if @xSplit = 1 begin
    select case
      when @$location = 0 and @$Lot = 0 then 1
      when @$location = 1 and @$Lot = 0 then 2
      when @$location = 0 and @$Lot = 1 then 3
      when @$location = 1 and @$Lot = 1 then 0
    end as view_index]]>&ExportImportTemplateQueryReturnFileName;<![CDATA[
  end
end
        ]]>
      </text>
    </command>

    <views>
      <fields identity="true" name="stt" index="1">
        &PSTranFieldsCompact;
      </fields>
      <fields identity="true" name="stt" index="2">
        &PSTranFieldsLocation;
      </fields>
      <fields identity="true" name="stt" index="3">
        &PSTranFieldsLot;
      </fields>

      &Tiny.External.Import.View.PSTran;
    </views>
  </query>

  <fields identity="true" name="stt">
    &PSTranFields;
  </fields>

  <template>
    <setting>
      <downloadFile>
        <text v="Phiếu xuất trả lại nhà cung cấp" e="Return to Supplier"/>
      </downloadFile>
    </setting>

    <fields row="5">
      <field name="ma_kh" width="16" starColor="&EIT.StarColor.Require;">
        <text v="Mã ncc" e="Supplier ID"/>
      </field>
      <field name="ten_kh" afterField="ma_kh" width="32" textColor="&EIT.TextColor.Sub;">
        <text v="Tên nhà cung cấp" e="Supplier Name"/>
      </field>
      <field name="ngay_ct" width="16" starColor="&EIT.StarColor.Require;">
        <text v="Ngày hóa đơn" e="Invoice Date"/>
      </field>
      <field name="so_ct" width="16" starColor="&EIT.StarColor.Require;">
        <text v="Số hóa đơn" e="Invoice Number"/>
      </field>
      <field name="so_seri" width="16">
        <text v="Ký hiệu" e="Serial Number"/>
      </field>
      <field name="ma_nx" width="16" starColor="&EIT.StarColor.Require;">
        <text v="Mã nhập xuất" e="Reason"/>
      </field>
      <field name="dien_giai" width="50">
        <text v="Diễn giải" e="Memo"/>
      </field>

      <field name="ma_vt" width="16" starColor="&EIT.StarColor.Require;">
        <text v="Mã hàng" e="Item"/>
      </field>
      <field name="ten_vt" afterField="ma_vt" width="32" textColor="&EIT.TextColor.Sub;">
        <text v="Tên mặt hàng" e="Item Name"/>
      </field>
      <field name="dvt" width="12">
        <text v="Đvt" e="UOM"/>
      </field>

      <field name="ma_kho" width="16" starColor="&EIT.StarColor.Sub;">
        <text v="Mã kho" e="Site"/>
      </field>
      <field name="ma_vi_tri" width ="16" starColor="&EIT.StarColor.Sub;">
        <text v="Mã vị trí" e="Location"/>
      </field>
      <field name="ma_lo" width ="16" starColor="&EIT.StarColor.Sub;">
        <text v="Mã lô" e="Lot"/>
      </field>
      <field name="so_luong" width="16">
        <text v="Số lượng" e="Product"/>
      </field>
      <field name="gia_nt" width="16">
        <text v="Giá" e="Price"/>
      </field>
      <field name="tien_nt" width="16">
        <text v="Tiền hàng" e="Amount"/>
      </field>
      <field name="ma_nt" width="16">
        <text v="Mã nt" e="Currency"/>
      </field>
      <field name="ty_gia" width="16">
        <text v="Tỷ giá" e="Ex. Rate"/>
      </field>

      <field name="tk" width="16" starColor="&EIT.StarColor.Sub;">
        <text v="Tk nợ" e="Debit Account"/>
      </field>
      <field name="tk_vt" width="16">
        <text v="Tk có" e="Credit Account"/>
      </field>


      <field name="mau_bc" width="16" starColor="&EIT.StarColor.Sub;">
        <text v="Mẫu báo cáo" e="Report Form"/>
      </field>
      <field name="ma_tc" width="16" starColor="&EIT.StarColor.Sub;">
        <text v="Mã tính chất" e="Tax Type"/>
      </field>

      <field name="ma_thue" width="16" starColor="&EIT.StarColor.Sub;">
        <text v="Mã thuế" e="Tax Code"/>
      </field>
      <field name="tk_thue" width="16" starColor="&EIT.StarColor.Sub;">
        <text v="Tk thuế" e="Tax Account"/>
      </field>

      <field name="ma_kh2" width="16" starColor="&EIT.StarColor.Sub;">
        <text v="Cục thuế" e="Tax Authority"/>
      </field>
      <field name="ten_vt" width="50">
        <text v="Nhóm hàng" e="Item Group"/>
      </field>
      <field name="ghi_chu" width="50">
        <text v="Ghi chú" e="Note"/>
      </field>
      <field name="outvat_yn" width="12">
        <text v="Chuyển vào bảng kê thuế đầu ra" e="Post to Output VAT"/>
      </field>

      <field name="ma_vv" width="16">
        <text v="Vụ việc" e="Job"/>
      </field>
      <field name="ma_bp" width="16">
        <text v="Bộ phận" e="Department"/>
      </field>
      <field name="so_lsx" width="16">
        <text v="Lsx" e="MO"/>
      </field>
      <field name="ma_sp" width="16">
        <text v="Sản phẩm" e="Product"/>
      </field>
      <field name="ma_hd" width ="16">
        <text v="Hợp đồng" e="Contract"/>
      </field>
      <field name="ma_phi" width ="16">
        <text v="Phí" e="Expense"/>
      </field>
      <field name="ma_ku" width ="16">
        <text v="Khế ước" e="Loan Contract"/>
      </field>

      &EIT.NoteField;
    </fields>
  </template>

  <processing>
    <text>
      &CheckVoucherRightBeforeProcess;
      <![CDATA[
declare @q nvarchar(4000), @duplicate nvarchar(512), @locked nvarchar(512), @field varchar(32), @wsID varchar(8), @voucherID varchar(8), @duplicateExRate nvarchar(512)
declare @master varchar(16), @detail varchar(16), @inquiry varchar(16), @baseCurrency varchar(8), @datetime0 char(21), @d0 datetime
declare @user int, @admin bit, @r int, @m int, @y int, @max1 int, @max2 int, @count int, @roundPrice int, @roundAmount int, @roundFAmount int

select @d0 = getdate(), @status = left(replace(@status, '''', '') , 1)
select @datetime0 = convert(char(8), @d0, 112) + ' ' + convert(char(12), @d0, 114)
select @admin = @@admin, @user = @@userID, @master = 'm]]>&Detail;<![CDATA[$', @detail = 'd]]>&Detail;<![CDATA[$', @inquiry = 'i]]>&Detail;<![CDATA[$', @voucherID = ']]>&Code;<![CDATA['

select @locked = case when @@language = 'v' then N'Đã khóa số liệu, kiểm tra lại ngày chứng từ tại dòng <span class="Highlight">%s</span>.' else N'Data is locked, please check the date of voucher at row <span class="Highlight">%s</span>.' end
select @duplicate = case when @@language = 'v' then N'Chứng từ số <span class="Highlight">%s1</span> ngày <span class="Highlight">%s2</span> tại dòng <span class="Highlight">%s3</span> đã tồn tại.'
  else 'The voucher number <span class="Highlight">%s1</span> dated <span class="Highlight">%s2</span> at row <span class="Highlight">%s3</span> already exists.' end
select @duplicateExRate = case when @@language = 'v' then N']]>&s1;<![CDATA[ có ngoại tệ hoặc tỷ giá nhập hơn một lần.' else ']]>&s2;<![CDATA[, currency or exchange rate already exists.' end

select @wsID = rtrim(val) from options where name = 'm_ws_id'
select @baseCurrency = rtrim(val) from options where name = 'm_ma_nt0'
select @roundPrice = cast(rtrim(val) as int) from options where name = 'm_round_gia'
select @roundAmount = cast(rtrim(val) as int) from options where name = 'm_round_tien'
select @roundFAmount = cast(rtrim(val) as int) from options where name = 'm_round_tien_nt'

select @max1 = character_maximum_length from information_schema.columns where table_name = @master + '000000' and column_name = 'so_ct'
select @max2 = character_maximum_length from information_schema.columns where table_name = @detail + '000000' and column_name = 'so_lsx'

-- Checking
update @@table set so_ct = space(@max1 - len(rtrim(ltrim(so_ct)))) + rtrim(ltrim(so_ct))
]]>&ImportOverwriteData;<![CDATA[

if @check$Unit <> '1' begin
  if @$mode = 1 begin
    ]]>&StartErrorCount;<![CDATA[
    ]]>&InsertErrorTable;<![CDATA[ select 'so_ct', stt, 'C001' from @@table a join c]]>&Detail;<![CDATA[$000000 b on a.ngay_ct = b.ngay_ct and a.so_ct = b.so_ct]]>&ImportSqlWhere;&VoucherLogImportExtendKey;&ImportOverwriteCheckKey;<![CDATA[
    ]]>&EndErrorCount;<![CDATA[
  end else begin
    select @r = min(stt) from @@table a join c]]>&Detail;<![CDATA[$000000 b on a.ngay_ct = b.ngay_ct and a.so_ct = b.so_ct]]>&ImportSqlWhere;&VoucherLogImportExtendKey;&ImportOverwriteCheckKey;<![CDATA[
    if @r is not null begin
      select replace(replace(replace(@duplicate, '%s1', so_ct), '%s2', convert(varchar(12), cast(ngay_ct as smalldatetime), 103)), '%s3', @@delta + @r) as message from @@table where stt = @r
      return
    end
  end
end

-- Update
]]>&UnitUpload.Extend;<![CDATA[
update @@table set tk_vt = c.tk_dl from @@table a join dmkho b on a.ma_kho = b.ma_kho join dmvt c on a.ma_vt = c.ma_vt where a.tk_vt = '' and b.dai_ly_yn = 1 and c.tk_dl <> ''
update @@table set tk = b.tk from @@table a join dmnx b on a.ma_nx = b.ma_nx where a.tk = ''
update @@table set so_lsx = space(@max2 - len(ltrim(rtrim(so_lsx)))) + ltrim(rtrim(so_lsx)), ma_nt = case when ma_nt <> '' then ma_nt else @baseCurrency end,
    dvt = case when a.dvt <> '' then a.dvt else b.dvt end,
    tk_vt = case when a.tk_vt <> '' then a.tk_vt else b.tk_vt end,
    tk = case when a.tk <> '' then a.tk else c.tk end
  from @@table a left join dmvt b on a.ma_vt = b.ma_vt left join dmkh c on a.ma_kh = c.ma_kh

select top 0 ma_dvcs, ngay_ct, so_ct, user_id0 as id into #unit from m]]>&Detail;<![CDATA[$000000
insert into #unit select b.ma_dvcs, a.ngay_ct, a.so_ct, min(a.stt) from @@table a join dmkho b on a.ma_kho = b.ma_kho group by b.ma_dvcs, a.ngay_ct, a.so_ct

-- Checking
if @check$Unit = '1' begin
  if @$mode = 1 begin
    select b.ma_dvcs, a.ngay_ct, a.so_ct, a.stt as id into #unitmode from @@table a join dmkho b on a.ma_kho = b.ma_kho
    ]]>&StartErrorCount;<![CDATA[
    ]]>&InsertErrorTable;<![CDATA[ select 'so_ct', id, 'C002' from #unitmode a join c]]>&Detail;<![CDATA[$000000 b on a.ngay_ct = b.ngay_ct and a.so_ct = b.so_ct and a.ma_dvcs = b.ma_dvcs]]>&ImportSqlWhere;&VoucherLogImportExtendKey;&ImportOverwriteCheckKey;<![CDATA[
    ]]>&EndErrorCount;<![CDATA[
  end else begin
    select @r = min(id) from #unit a join c]]>&Detail;<![CDATA[$000000 b on a.ngay_ct = b.ngay_ct and a.so_ct = b.so_ct and a.ma_dvcs = b.ma_dvcs]]>&ImportSqlWhere;&VoucherLogImportExtendKey;&ImportOverwriteCheckKey;<![CDATA[
    if @r is not null begin
      select replace(replace(replace(replace(@duplicate$Unit, '%s1', so_ct), '%s2', convert(varchar(12), cast(ngay_ct as smalldatetime), 103)), '%s3', rtrim(ma_dvcs)), '%s4', @@delta + @r) as message from #unit where id = @r
      return
    end
  end
end

-- Locked Date
]]>&ImportLockedDateCheck;<![CDATA[

@@checking(1);

if @$mode = 1 begin
  ]]>&StartErrorCount;<![CDATA[
  ]]>&InsertErrorTable;<![CDATA[ select 'dvt', stt, '00001' from @@table a left join vdmvtqddvt b on a.dvt = b.dvt and (a.ma_vt = b.ma_vt or b.ma_vt = '*') left join dmvt c on a.ma_vt = c.ma_vt and a.dvt = c.dvt where b.dvt is null and c.dvt is null
  ]]>&w1;<![CDATA['dvt']]>&w2;<![CDATA[stt]]>&w3;<![CDATA['00001']]>&w4;<![CDATA[
  ]]>&EndErrorCount;<![CDATA[
end else begin
  select @field = 'dvt', @r = min(stt) from @@table a left join vdmvtqddvt b on a.dvt = b.dvt and (a.ma_vt = b.ma_vt or b.ma_vt = '*') left join dmvt c on a.ma_vt = c.ma_vt and a.dvt = c.dvt where b.dvt is null and c.dvt is null]]>&Error;<![CDATA[
end

select @field = 'ma_kho'
if @admin <> 1 begin
  ]]>&SiteRight;<![CDATA[
end

@@checking(2);

if @$mode = 1 begin
  ]]>&StartErrorCount;<![CDATA[
  ]]>&InsertErrorTable;<![CDATA[ select 'so_ct', stt, 'C010' from @@table a where exists(select 1 from #table b where a.ngay_ct = b.ngay_ct and a.so_ct = b.so_ct and a.stt <> b.stt and (a.ty_gia <> b.ty_gia or a.ma_nt <> b.ma_nt))
  ]]>&EndErrorCount;<![CDATA[
end else begin
  select @r = min(a.stt) from @@table a where exists(select 1 from #table b where a.ngay_ct = b.ngay_ct and a.so_ct = b.so_ct and a.stt <> b.stt and (a.ty_gia <> b.ty_gia or a.ma_nt <> b.ma_nt))
  if @r is not null begin
    select replace(replace(replace(@duplicateExRate, '%s1', so_ct), '%s2', convert(varchar(12), cast(ngay_ct as smalldatetime), 103)), '%s3', @@delta + @r) as message from @@table where stt = @r
    return
  end
end

@@checking(3);

-- Check Tax
update @@table set tk_thue = b.tk_thue_no3 from @@table a left join dmthue b on a.ma_thue = b.ma_thue where a.ma_thue <> '' and a.tk_thue = ''

@@checking(4);

]]>&PSTranChecking;<![CDATA[

]]>&ConfigDynamicImportChecking;<![CDATA[

]]>&ImportOverwriteChecking;&EndErrorMode;<![CDATA[

-- Gather
select top 0 stt_rec, ngay_ct, so_ct, cast(0 as int) as stt, identity(int, 1, 1) as id into #id from m]]>&Detail;<![CDATA[$000000
insert into #id(stt_rec, ngay_ct, so_ct, stt) select '', a.ngay_ct, a.so_ct, min(a.stt) from @@table a]]>&ImportOverwriteIdentiyDataCondition;<![CDATA[ group by a.ngay_ct, a.so_ct order by a.ngay_ct, a.so_ct

select identity(int, 1, 1) as id, cast(stt as int) as stt, convert(varchar(8), ngay_ct, 112) + so_ct as c, cast(0 as int) as ln into #ln from @@table order by ngay_ct, so_ct, stt
exec AI_ERP$App$UpdateLineNumber
create index i on #ln(stt)

select @count = count(*) from #id
exec AI_ERP$App$UpdateIdentityNumber @wsID, @voucherID, @count, @@userID
]]>&ImportOverwriteProcess;<![CDATA[

select top 0 a.stt_rec, a.stt_rec0, a.line_nbr, a.ma_ct, a.ngay_ct, a.so_ct, a.ma_vt, a.ma_kho, a.ma_vi_tri, a.ma_lo, a.dvt, b.nhieu_dvt, a.he_so, a.so_luong, a.gia_nt, a.gia, a.tien_nt, a.tien, a.thue_nt, a.thue, a.tk_vt, a.ma_vv, a.ma_bp, a.so_lsx, a.ma_sp, a.ma_hd, a.ma_phi, a.ma_ku
  into #d]]>&Detail;<![CDATA[ from d]]>&Detail;<![CDATA[$000000 a, dmvt b

insert into #d]]>&Detail;<![CDATA[ select b.stt_rec, dbo.AI_ERP$Function$Voucher$GetRecordsGroup(i.ln), i.ln, @voucherID, a.ngay_ct, a.so_ct,
    a.ma_vt, a.ma_kho, a.ma_vi_tri, a.ma_lo, a.dvt, c.nhieu_dvt, 1, a.so_luong, a.gia_nt, round(a.gia_nt * a.ty_gia, @roundPrice), a.tien_nt, round(a.tien_nt * a.ty_gia, @roundAmount),
    0, 0, a.tk_vt, a.ma_vv, a.ma_bp, a.so_lsx, a.ma_sp, a.ma_hd, a.ma_phi, a.ma_ku
  from @@table a join #id b on a.ngay_ct = b.ngay_ct and a.so_ct = b.so_ct left join dmvt c on a.ma_vt = c.ma_vt join #ln i on a.stt = i.stt
  order by a.ngay_ct, a.so_ct, a.stt

select top 0 stt_rec, status, ma_dvcs, ma_ct, ngay_ct, so_ct, so_seri, loai_ct, ma_gd, ma_kh, ma_nx, tk, dien_giai, ma_nt, ty_gia, t_so_luong, t_tien_nt, t_tien, t_thue_nt, t_thue, ma_thue, thue_suat, tk_thue, mau_bc, ma_tc, ma_kh2, ten_vt, ghi_chu, outvat_yn
  into #m]]>&Detail;<![CDATA[ from m]]>&Detail;<![CDATA[$000000

insert into #m]]>&Detail;<![CDATA[ select b.stt_rec, @status, c.ma_dvcs, @voucherID, a.ngay_ct, a.so_ct, a.so_seri, '1', '1',
    a.ma_kh, a.ma_nx, a.tk, a.dien_giai, a.ma_nt, a.ty_gia, d.t_so_luong, d.t_tien_nt, d.t_tien, round(d.t_tien_nt * isnull(e.thue_suat, 0) / 100, case when a.ma_nt = @baseCurrency then @roundAmount else @roundFAmount end), round(d.t_tien * isnull(e.thue_suat, 0) / 100, @roundAmount),
    a.ma_thue, isnull(e.thue_suat, 0), a.tk_thue, a.mau_bc, a.ma_tc, a.ma_kh2, a.ten_vt, a.ghi_chu, a.outvat_yn
  from @@table a
    join #id b on a.stt = b.stt join #unit c on a.ngay_ct = c.ngay_ct and a.so_ct = c.so_ct
    join (select stt_rec, sum(so_luong) as t_so_luong, sum(tien_nt) as t_tien_nt, sum(tien) as t_tien from #d]]>&Detail;<![CDATA[ group by stt_rec) d on b.stt_rec = d.stt_rec
    left join dmthue e on a.ma_thue = e.ma_thue

update #d]]>&Detail;<![CDATA[ set thue_nt = round(a.tien_nt * b.thue_suat / 100, case when b.ma_nt = @baseCurrency then @roundAmount else @roundFAmount end), thue = round(a.tien * b.thue_suat / 100, @roundAmount) from #d]]>&Detail;<![CDATA[ a join #m]]>&Detail;<![CDATA[ b on a.stt_rec = b.stt_rec
update #d]]>&Detail;<![CDATA[ set he_so = b.he_so from #d]]>&Detail;<![CDATA[ a join vdmvtqddvt b on (a.ma_vt = b.ma_vt or b.ma_vt = '*') and a.dvt = b.dvt where a.nhieu_dvt = 1

select top 0 stt_rec, ngay_ct, so_ct, ma_dvcs, status, user_id0, c$, m$, d$, e$, identity(int, 1, 1) as id into #i]]>&Detail;<![CDATA[ from i]]>&Detail;<![CDATA[$000000
insert into #i]]>&Detail;<![CDATA[ select stt_rec, ngay_ct, so_ct, ma_dvcs, @status, @user, convert(varchar(12), ngay_ct, 112) + so_ct + stt_rec, '#10$' + rtrim(ma_kh) + '#20$' + rtrim(ma_nx) + '#30$' + rtrim(ma_nt), '', '' from #m]]>&Detail;<![CDATA[
select @q = dbo.AI_ERP$Function$Update$Inquiry('#i]]>&Detail;<![CDATA[', '#d]]>&Detail;<![CDATA[', 'd$', 'ma_kho, ma_vt, tk_vt', '#10$, #20$, #30$', 'stt_rec', default, default, @voucherID, 'e$', 1)
exec sp_executesql @q

-- Insert
declare @p varchar(32), @masterTable varchar(32), @detailTable varchar(32), @inquiryTable varchar(32), @insertKey varchar(128)

select distinct month(ngay_ct) as m, year(ngay_ct) as y into #k from #id
select @r = min(y * 12 + m) from #k
while @r is not null begin
  select @m = m, @y = y from #k where y * 12 + m = @r
  select @p = rtrim(@y) + replace(str(@m, 2), ' ', '0'), @insertKey = 'month(ngay_ct) = ' + rtrim(@m) + ' and year(ngay_ct) = ' + rtrim(@y)
  select @masterTable = @master + @p, @detailTable = @detail + @p, @inquiryTable = @inquiry + @p

  select @q = @@inserting(master, @masterTable, @insertKey);
  exec sp_executesql @q

  select @q = @@inserting(detail, @detailTable, @insertKey);
  exec sp_executesql @q

  select @q = @@inserting(inquiry, @inquiryTable, @insertKey);
  exec sp_executesql @q

  ]]>&EIImportInsert;<![CDATA[
  ]]>&ImportOverwriteInsertingByPart;<![CDATA[
  select @r = min(y * 12 + m) from #k where y * 12 + m > @r
end

@@inserting(general);
]]>&ImportOverwriteInserting;<![CDATA[

declare @External nvarchar(4000), @Statement nvarchar(4000), @Numeric varchar(4000), @String varchar(4000), @fieldSelect varchar(4000)
if @status <> '0' begin
    select a.stt_rec, '001' as stt_rec0, a.ma_dvcs, a.loai_ct, a.ma_ct, a.ngay_ct, a.so_ct,
      a.ngay_ct as ngay_ct0, ltrim(a.so_ct) as so_ct0, a.so_seri as so_seri0, a.mau_bc, a.ma_tc, a.ma_kh, c.ten_kh, c.dia_chi, c.ma_so_thue,
      a.ma_kh2, case when a.ten_vt <> '' then a.ten_vt else g.ten_vt end as ten_vt,
      case when a.ma_nt = @baseCurrency then '' else a.ma_nt end as ma_nt, case when a.ma_nt = @baseCurrency then 0 else a.ty_gia end as ty_gia,
      case when a.ma_nt = @baseCurrency then 0 else -a.t_tien_nt end as t_tien_nt, -a.t_tien as t_tien, a.ma_thue, a.thue_suat,
      case when a.ma_nt = @baseCurrency then 0 else -a.t_thue_nt end as t_thue_nt, -a.t_thue as t_thue, a.tk_thue as tk_thue_no,
      a.tk as tk_du, b.ma_kho, a.ghi_chu, 1 as line_nbr, a.status
    into #t30 from #m]]>&Detail;<![CDATA[ a join (select stt_rec, ma_kho from #d]]>&Detail;<![CDATA[ where line_nbr = 1) b on a.stt_rec = b.stt_rec
      join dmkh c with(nolock) on a.ma_kh = c.ma_kh
      join (select d.stt_rec, max(d.ma_vt) as ma_vt from #d]]>&Detail;<![CDATA[ d join (select stt_rec, max(tien) as tien from #d]]>&Detail;<![CDATA[ group by stt_rec) e on d.stt_rec = e.stt_rec and d.tien = e.tien group by d.stt_rec) f on a.stt_rec = f.stt_rec left join dmvt g with(nolock) on f.ma_vt = g.ma_vt
    where a.outvat_yn = 0 and a.mau_bc <> ''

    select a.stt_rec, '001' as stt_rec0, a.ma_dvcs, a.loai_ct, a.ma_ct, a.ngay_ct, a.so_ct, a.so_seri,
      a.ma_kh, c.ten_kh, c.dia_chi, c.ma_so_thue, a.ma_kh2, case when a.ten_vt <> '' then a.ten_vt else g.ten_vt end as ten_vt,
      case when a.ma_nt = @baseCurrency then '' else a.ma_nt end as ma_nt, case when a.ma_nt = @baseCurrency then 0 else a.ty_gia end as ty_gia,
      case when a.ma_nt = @baseCurrency then 0 else a.t_tien_nt end as t_tien_nt2, a.t_tien as t_tien2, a.ma_thue, a.thue_suat,
      case when a.ma_nt = @baseCurrency then 0 else a.t_thue_nt end as t_thue_nt, a.t_thue, a.tk_thue as tk_thue_co,
      a.tk as tk_du, b.ma_kho, a.ghi_chu, 1 as line_nbr, a.status
    into #t20 from #m]]>&Detail;<![CDATA[ a join (select stt_rec, ma_kho from #d]]>&Detail;<![CDATA[ where line_nbr = 1) b on a.stt_rec = b.stt_rec
      join dmkh c with(nolock) on a.ma_kh = c.ma_kh
      join (select d.stt_rec, max(d.ma_vt) as ma_vt from #d]]>&Detail;<![CDATA[ d join (select stt_rec, max(tien) as tien from #d]]>&Detail;<![CDATA[ group by stt_rec) e on d.stt_rec = e.stt_rec and d.tien = e.tien group by d.stt_rec) f on a.stt_rec = f.stt_rec left join dmvt g with(nolock) on f.ma_vt = g.ma_vt
    where a.outvat_yn = 1 and a.mau_bc <> ''

  @@inserting(inputTax);
  @@inserting(outputTax);

  -- Allocation cttt60
  select stt_rec, ma_dvcs, loai_ct, ngay_ct, so_ct, ma_kh, ma_nt, ty_gia, t_tien_nt + t_thue_nt as t_tt_nt, t_tien + t_thue as t_tt, dien_giai, tk,
    ma_ct, status, @datetime0 as datetime0, @datetime0 as datetime2, @user as user_id0, @user as user_id2 into #malloc from #m]]>&Detail;<![CDATA[ where status in ('2', '3')
  exec AI_ERP$Voucher$Import$Allocation @voucherID, '0', '#malloc', '', 't_tt_nt', 't_tt', '', '', 'cttt60', 'ma_kh_i', ''

  -- Inventory
  select @Statement = 'update #in set ma_nx = b.ma_nx from #in a join dmnx b on a.ma_nx = b.tk where b.ma_nx is not null'
  select @Statement = @Statement + char(13) + 'update #in set loai_ct = b.loai_ct, ma_gd = b.ma_gd, ngay_lct = a.ngay_ct, px_gia_dd = 1, thue_suat = a.thue_suat,'
  select @Statement = @Statement + ' datetime0 = ''' + @datetime0 + ''', datetime2 = ''' + @datetime0 + ''', user_id0 = ' + rtrim(@user) + ', user_id2 = ' + rtrim(@user)
  select @Statement = @Statement + ' from #in a join #m]]>&Detail;<![CDATA[ b on a.stt_rec = b.stt_rec'

  exec AI_ERP$Voucher$Import$PostInventory '#m]]>&Detail;<![CDATA[', '#d]]>&Detail;<![CDATA[', @voucherID, '#k',
    'ct_dc, pn_gia_tb, sl_nhap1, gia_nt01, gia01, gia_nt21, gia21, sl_nhap, tien_nt_n, tien_nhap, gia_nt0, gia0, tien_nt0, tien0, cp_vc_nt, cp_vc, cp_bh_nt, cp_bh, cp_khac_nt, cp_khac, cp_nt, cp, thue_suat_nk, nk_nt, nk, thue_suat_ttdb, ttdb_nt, ttdb, gia_nt2, gia2, tien_nt2, tien2, cp_thue_yn, ck_nt, ck, nam, ky, sl_td1, sl_td2, sl_td3, s4, s5, s6',
    'ma_nk, so_seri, so_lo, ma_khon, ma_vi_trin, so_dh2, so_dh3, ma_nvbh, ma_nv, tk_gv, tk_dt, tk_thue_nk, tk_thue_ttdb, ma_tt, tk_thue_no, tk_thue_co, tk_ck, stt_rec_pn, stt_rec0pn, stt_rec_px, stt_rec0px, stt_rec_dc, stt_rec_yc, stt_rec0yc, so_ct0, so_seri0, ma_td1, ma_td2, ma_td3, gc_td1, gc_td2, gc_td3, s1, s2, s3',
    'tk_du = c.tk, ma_nx = c.tk, gia_nt1 = b.gia_nt, gia1 = b.gia, sl_xuat = b.so_luong, gia_nt = b.gia_nt, gia = b.gia, tien_xuat = b.tien, tien_nt_x = b.tien_nt, thue = b.thue, thue_nt = b.thue_nt',
    @Statement, 0, 2

  if (@status in ('2', '3')) begin
    declare @tax30Table varchar(32), @tax20Table varchar(32)
    select @r = min(y * 12 + m) from #k
    while @r is not null begin
      select @m = m, @y = y from #k where y * 12 + m = @r
      select @p = rtrim(@y) + replace(str(@m, 2), ' ', '0'), @insertKey = 'month(ngay_ct) = ' + rtrim(@m) + ' and year(ngay_ct) = ' + rtrim(@y)
      select @tax30Table = 'r30$' + @p, @tax20Table = 'r20$' + @p

      select @q = @@inserting(tax30, @tax30Table, @insertKey);
      exec sp_executesql @q

      select @q = @@inserting(tax20, @tax20Table, @insertKey);
      exec sp_executesql @q

      select @r = min(y * 12 + m) from #k where y * 12 + m > @r
    end
    if @status = '2' begin
      select @fieldSelect = 'stt_rec, ma_dvcs, ''' + @voucherID + ''', ngay_ct, so_ct, t_tien_nt + t_thue_nt, t_tien + t_thue, ma_nt, ty_gia, dien_giai, ''' + @datetime0 + ''', ' + rtrim(@user)
      exec AI_ERP$Voucher$Import$PostLater '#m]]>&Detail;<![CDATA[', @voucherID, @fieldSelect, ''
    end
    if @status = '3' begin
      declare @glGroup varchar(128), @glAcctField varchar(128), @glAcctFieldRef varchar(128), @glAmountField varchar(128), @glFCAmountField varchar(128), @glKey varchar(512), @glNoAccList varchar(128), @glNoAccListRef varchar(128), @glGroups varchar(128)

      select @glAcctField = 'tk', @glAcctFieldRef = 'tk_vt', @glAmountField = 'tien', @glFCAmountField = 'tien_nt', @glKey = '1=1', @glNoAccList = '1', @glNoAccListRef = '0', @glGroups = '0'
      select @Numeric = 'nam, ky, sl_td1, sl_td2, sl_td3, s4, s5, s6', @String = 'ma_nk, so_lo, so_dh, gc_td1, gc_td2, gc_td3, s1, s2, s3', @External = 'dien_giai_h = b.dien_giai, datetime0 = ''' + @datetime0 + ''', datetime2 = ''' + @datetime0 + ''', user_id0 = ' + rtrim(@user) + ', user_id2 = ' + rtrim(@user), @Statement = 'update #gl set ct_nxt = 2, status = 1, ma_gd = loai_ct, so_ct0 = ltrim(so_ct0)'
      select @glGroup = rtrim(groupby) from @@sysDatabaseName..voucherinfo where ma_ct = @voucherID

      select a.*, b.ma_kh, b.ma_kh as ma_kh_ref, b.dien_giai, b.tk, b.ma_dvcs, a.ngay_ct as ngay_lct, b.ma_nt, b.ty_gia,
          cast('' as nvarchar(1024)) as ong_ba, b.loai_ct, b.ma_gd, b.ngay_ct as ngay_ct0, b.so_ct as so_ct0
        into #dGL0 from #d]]>&Detail;<![CDATA[ a join #m]]>&Detail;<![CDATA[ b on a.stt_rec = b.stt_rec where a.tk_vt <> b.tk

      insert into #dGL0 (stt_rec, stt_rec0, line_nbr, ma_ct, ngay_ct, so_ct, tk_vt, tien_nt, tien, ma_kh, ma_kh_ref,
          ma_vv, ma_bp, so_lsx, ma_sp, ma_hd, ma_phi, ma_ku, dien_giai, tk, ma_dvcs, ngay_lct, ma_nt, ty_gia, ong_ba, loai_ct, ma_gd, ngay_ct0, so_ct0, ma_vt)
        select stt_rec, '001', 1, ma_ct, ngay_ct, so_ct, tk_thue, t_thue_nt, t_thue, ma_kh, ma_kh, '', '', '', '', '', '', '', dien_giai,
            tk, ma_dvcs, ngay_ct, ma_nt, ty_gia, '', loai_ct, ma_gd, ngay_ct, so_ct, ''
          from #m]]>&Detail;<![CDATA[ where mau_bc <> '' and t_thue_nt + t_thue <> 0

      exec AI_ERP$Voucher$Import$PostGL '#m]]>&Detail;<![CDATA[', '#dGL0', @voucherID, @glAcctField, @glAcctFieldRef, @glAmountField, @glFCAmountField, @glKey, @glNoAccList, @glNoAccListRef, @glGroup, @Numeric, @String, @External, @Statement, '#k', @glGroups
    end
  end
end
]]>
    </text>
  </processing>

</import>